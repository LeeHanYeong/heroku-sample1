# Generated by Django 3.2.10 on 2021-12-29 22:23
import os

from django.conf import settings
from django.core.files.base import ContentFile
from django.db import migrations, models
import django.db.models.deletion


def forwards_func(apps, schema_editor):
    Post = apps.get_model("blog", "Post")
    Comment = apps.get_model("blog", "Comment")
    db_alias = schema_editor.connection.alias

    posts = [
        {
            "title": "Poetry를 사용한 파이썬 패키지 관리",
            "content": """파이썬의 기본 패키지 관리자인 pip는 패키지간 의존성 및 버전 호환 관리가 힘들며, 의존성 패키지를 제외한 실제 필요 패키지의 구분이 어렵습니다.
이를 해결하기 위해 파이썬 패키지를 관리할 수 있도록 도와주는 pipenv, pipx와 같은 여러 라이브러리들이 있습니다만, 항상 약간씩 기능에 아쉬움을 느껴 지금까지는 직접 requirements.txt를 버전별로 관리하는 방법을 사용했습니다.
그러던 중 최근에 Poetry라는 관리도구를 사용해보았는데, 다른 도구들에서 불편하던 점들이 많이 개선되어 사용법을 남겨봅니다. 저는 Poetry가 자동으로 제공하는 가상환경을 사용하지 않고, Pyenv와 Pyenv-virtualenv로 직접 생성한 가상환경을 사용합니다.""",
            "image": "coffee.jpg",
        },
        {
            "title": "pyenv와 virtualenv를 사용한 파이썬 개발환경 구성",
            "content": """pyenv
여러 프로젝트를 동시에 진행하다보면, 예전의(레거시) 프로젝트에서는 2.7버전을, 새로 시작하는 프로젝트에서는 3.6버전을 사용하는 식으로 다양한 버전을 사용하게 되므로 파이썬 버전을 각각 분리하여 사용해야 하며, 이 때 pyenv라는 파이썬 버전 관리 시스템을 사용한다.

virtualenv, pyenv-virtualenv
가상환경은 프로젝트별로 설치된 패키지들간의 충돌을 막아주기 위해 필요하다. 파이썬에서는 이를 해결하기 위해 일반적으로 virtualenv라는 패키지를 사용하며, 이 포스팅에서는 pyenv와 같이 사용할 경우 좀 더 밀접하게 사용가능하도록 나온 pyenv-virtualenv를 사용한다.""",
            "image": "forest.jpg",
        },
        {
            "title": "Git을 이용한 협업 워크플로우",
            "content": """이 글에서는 여러 엔터프라이즈 개발팀을 조사하여 정리한 대표적인 Git 협업 워크플로우를 소개합니다. 여기서 제시하는 워크플로우들은 엄격한 규칙이라기보다는 상황에 적절한 워크플로우를 선택하기 위한 일종의 가이드입니다.

1. Centralized Workflow
Centralized Workflow는 프로젝트에 단일 중앙 저장소를 사용하며, master브랜치 하나만 사용합니다.
팀 구성원들은 중앙 저장소를 복제하여 로컬 저장소를 만들고, 로컬 저장소에서 변경 내용을 커밋하고 언제든 중앙 저장소와 동기화합니다.

2. Feature Branch Workflow
Feature Branch Workflow의 핵심은 기능별 브랜치를 만들어 작업하는 것입니다. master브랜치는 항상 버그 프리 상태로 유지하며, 병합시 권한을 가진 사용자가 풀 리퀘스트를 적용할 수 있습니다.""",
            "image": "imac.jpg",
        },
    ]
    for post_info in posts:
        image = post_info.pop("image")
        post = Post.objects.using(db_alias).create(**post_info)
        thumbnail_path = os.path.join(settings.BASE_DIR, "static", "images", image)
        post.thumbnail.save(image, ContentFile(open(thumbnail_path, "rb").read()))

    comments = [
        {
            "post": Post.objects.all()[0],
            "content": "좋은 라이브러리네요!",
        },
        {
            "post": Post.objects.all()[0],
            "content": "잘 보았습니다 :)",
        },
    ]
    for comment_info in comments:
        Comment.objects.using(db_alias).create(**comment_info)


def reverse_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, verbose_name="포스트 제목")),
                ("content", models.TextField(verbose_name="포스트 내용")),
                (
                    "thumbnail",
                    models.ImageField(
                        blank=True, upload_to="post", verbose_name="썸네일이미지"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(verbose_name="댓글 내용")),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="blog.post"
                    ),
                ),
            ],
        ),
        migrations.RunPython(forwards_func, reverse_func),
    ]
